#!/usr/bin/env python
"""
spellchecking strings and comments in Python source files
"""

import lib2to3.main
import argparse
import pypsourcespellchecker.spellchecker as spellmod
import pypsourcespellchecker.fix_spellcheck

__author__ = "Hartmut Goebel <h.goebel@crazy-compilers.com>"
__copyright__ = "Copyright 2012 by Hartmut Goebel <h.goebel@crazy-compilers.com>"
__licence__ = "GNU Public Licence v3 (GPLv3)"


class moo_LIST: pass
class moo_CMDLINE: pass


def main(language, files, pwl=None, mode_of_operation=moo_LIST):
    if mode_of_operation is moo_LIST:
        checker = spellmod.SpellChecker(language, pwl)
    elif mode_of_operation is moo_CMDLINE:
        checker = spellmod.CmdLineSpellChecker(language, pwl)
    else:
        raise ValueError(mode_of_operation)
    pypsourcespellchecker.fix_spellcheck.spellchecker = checker # :hack:
    lib2to3.main.main('pypsourcespellchecker', files)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--language', default='en_US',
                        help='language to use for spellchecking, default: %(default)s')
    parser.add_argument('--pwl', default='project.dict',
                        help='personal wordlist to use, default: %(default)s')
    parser.add_argument('--no-pwl', action='store_false', dest='pwl',
                        help='do not use any personal wordlist.')
    group = parser.add_argument_group('Mode of operation')
    group.add_argument('--list', action='store_const', const=moo_LIST,
                       dest='mode_of_operation', default=moo_LIST,
                       help='simply list all spellchecking errors (this is the default)')
    group.add_argument('--command-line', '--cmd-line', '--interactive',
                       action='store_const', const=moo_CMDLINE,
                       dest='mode_of_operation',
                       help='interactively check the spelling on the command line')
    parser.add_argument('files', metavar='source-file', nargs='+')
    args = parser.parse_args()
    files = args.files
    #:todo: recursive
    main(language=args.language, pwl=args.pwl, files=files,
         mode_of_operation=args.mode_of_operation)
